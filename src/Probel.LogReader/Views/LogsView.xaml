<UserControl
    x:Class="Probel.LogReader.Views.LogsView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conv="clr-namespace:Probel.LogReader.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:local="clr-namespace:Probel.LogReader.Views"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    x:Name="_self"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <UserControl.Resources>
        <conv:TextToVisibilityConverter x:Key="TextToVisibilityConverter" />
        <conv:StringToOneLinerConverter x:Key="StringToOneLinerConverter" />
        <conv:UppercaseConverter x:Key="UppercaseConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
            <RowDefinition>
                <RowDefinition.Style>
                    <Style>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=IsDetailsVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                <Setter Property="RowDefinition.Height" Value="8*" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=IsDetailsVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                <Setter Property="RowDefinition.Height" Value="0" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </RowDefinition.Style>
            </RowDefinition>
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <ToolBarTray>
            <ToolBar>
                <Button x:Name="LoadDays">
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconEntypo
                            Margin="0,0,5,0"
                            VerticalAlignment="Center"
                            VerticalContentAlignment="Center"
                            Kind="Back" />
                        <TextBlock Text="Back" />
                    </StackPanel>
                </Button>
            </ToolBar>
            <ToolBar>
                <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding IsTraceVisible, UpdateSourceTrigger=PropertyChanged}">
                    <iconPacks:PackIconModern Kind="Eye" />
                </ToggleButton>
                <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding IsDebugVisible, UpdateSourceTrigger=PropertyChanged}">
                    <iconPacks:PackIconModern Kind="Bug" />
                </ToggleButton>
                <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding IsInfoVisible, UpdateSourceTrigger=PropertyChanged}">
                    <iconPacks:PackIconModern Kind="InformationCircle" />
                </ToggleButton>
                <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding IsWarnVisible, UpdateSourceTrigger=PropertyChanged}">
                    <iconPacks:PackIconModern Kind="Warning" />
                </ToggleButton>
                <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding IsErrorVisible, UpdateSourceTrigger=PropertyChanged}">
                    <iconPacks:PackIconModern Kind="Stop" />
                </ToggleButton>
                <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding IsFatalVisible, UpdateSourceTrigger=PropertyChanged}">
                    <iconPacks:PackIconModern Kind="SignStop" />
                </ToggleButton>
            </ToolBar>
            <ToolBar>
                <ToggleButton x:Name="IsDetailsVisible">
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial
                            Margin="0,0,5,0"
                            VerticalAlignment="Center"
                            VerticalContentAlignment="Center"
                            Kind="EyePlusOutline" />
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=IsDetailsVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Text" Value="Hide details" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=IsDetailsVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                            <Setter Property="Text" Value="Show details" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </ToggleButton>
                <Separator />
                <ToggleButton x:Name="IsThreadIdVisible">
                    <ToggleButton.Style>
                        <Style TargetType="ToggleButton">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=IsThreadIdVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Content" Value="Hidesdsdf Thread id" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=IsThreadIdVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Content" Value="Showsddf Thread id" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial
                            Margin="0,0,5,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center"
                            Kind="TableColumn" />
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=IsThreadIdVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Text" Value="Hide Thread id" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=IsThreadIdVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                            <Setter Property="Text" Value="Show Thread id" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </ToggleButton>
                <ToggleButton x:Name="IsLoggerVisible">
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial
                            Margin="0,0,5,0"
                            VerticalAlignment="Center"
                            VerticalContentAlignment="Center"
                            Kind="TableColumn" />
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=IsLoggerVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Text" Value="Hide logger" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=IsLoggerVisible, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                            <Setter Property="Text" Value="Show logger" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </ToggleButton>
            </ToolBar>
            <ToolBar Visibility="{Binding CanListen, Converter={StaticResource BooleanToVisibilityConverter}}">
                <ToggleButton x:Name="_isListeningFile" IsChecked="{Binding IsListeningFile}">
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial
                            Margin="0,0,5,0"
                            VerticalAlignment="Center"
                            VerticalContentAlignment="Center"
                            Kind="Radar" />
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=_isListeningFile, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Text" Value="Stop listening" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=_isListeningFile, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                            <Setter Property="Text" Value="Start listening" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </ToggleButton>
            </ToolBar>
        </ToolBarTray>
        <DataGrid
            x:Name="_logs"
            Grid.Row="1"
            AutoGenerateColumns="False"
            CanUserAddRows="False"
            CanUserReorderColumns="False"
            CanUserResizeRows="False"
            CanUserSortColumns="False"
            FontFamily="Consolas"
            FontSize="11"
            GridLinesVisibility="Horizontal"
            HorizontalGridLinesBrush="#0C000000"
            IsReadOnly="True"
            ItemsSource="{Binding Logs}"
            MouseDoubleClick="OnLogsMouseDoubleClick"
            SelectionMode="Single"
            VerticalGridLinesBrush="#82000000">
            <DataGrid.Resources>
                <ResourceDictionary>
                    <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{x:Null}" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{x:Null}" />
                                <Setter Property="Foreground" Value="{x:Static SystemColors.ControlTextBrush}" />
                                <Setter Property="FontWeight" Value="ExtraBold" />
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="{x:Type DataGridRow}">
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{x:Null}" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{x:Null}" />
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>
            </DataGrid.Resources>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Level, Converter={StaticResource UppercaseConverter}}" Value="TRACE">
                            <Setter Property="Background" Value="{DynamicResource LogTraceColour}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level, Converter={StaticResource UppercaseConverter}}" Value="DEBUG">
                            <Setter Property="Background" Value="{DynamicResource LogDebugColour}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level, Converter={StaticResource UppercaseConverter}}" Value="INFO">
                            <Setter Property="Background" Value="{DynamicResource LogInfoColour}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level, Converter={StaticResource UppercaseConverter}}" Value="WARN">
                            <Setter Property="Background" Value="{DynamicResource LogWarnColour}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level, Converter={StaticResource UppercaseConverter}}" Value="ERROR">
                            <Setter Property="Background" Value="{DynamicResource LogErrorColour}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level, Converter={StaticResource UppercaseConverter}}" Value="FATAL">
                            <Setter Property="Background" Value="{DynamicResource LogFatalColour}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="(+)">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <iconPacks:PackIconOcticons
                                HorizontalAlignment="Center"
                                Kind="Check"
                                Visibility="{Binding Exception, Converter={StaticResource TextToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Time, StringFormat=HH:mm:ss.fff}"
                    Header="Time" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Level, Converter={StaticResource UppercaseConverter}}"
                    Header="Level" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding ThreadId}"
                    Header="ThreadId"
                    Visibility="{Binding IsChecked, Source={x:Reference IsThreadIdVisible}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Logger}"
                    Header="Logger"
                    Visibility="{Binding IsChecked, Source={x:Reference IsLoggerVisible}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <DataGridTextColumn
                    Width="*"
                    Binding="{Binding Message, Converter={StaticResource StringToOneLinerConverter}}"
                    Header="Message" />
            </DataGrid.Columns>
        </DataGrid>
        <Grid Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="80" />
                <RowDefinition Height="5" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <GroupBox Header="Message">
                <TextBox IsReadOnly="True" Text="{Binding ElementName=_logs, Path=SelectedItem.Message}" />
            </GroupBox>
            <GridSplitter
                Grid.Row="1"
                Height="5"
                HorizontalAlignment="Stretch" />
            <GroupBox Grid.Row="2" Header="Call stack">
                <TextBox IsReadOnly="True" Text="{Binding ElementName=_logs, Path=SelectedItem.Exception}" />
            </GroupBox>
        </Grid>
        <StatusBar Grid.Row="4">
            <StatusBarItem>
                <TextBlock>
                    <Run Text="{Binding LogsCount, Mode=OneWay}" />
                    <Run Text="Item(s)" />
                </TextBlock>
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <TextBlock>
                    <Run Text="Repository:" />
                    <Run Text="{Binding RepositoryName, Mode=OneWay}" />
                </TextBlock>
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <TextBlock>
                    <Run Text="Date:" />
                    <Run Text="{Binding Date, Mode=OneWay, StringFormat={}dd MMMM yyyy}" />
                </TextBlock>
            </StatusBarItem>
            <Separator Visibility="{Binding IsFile, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <StatusBarItem>
                <TextBlock Visibility="{Binding IsFile, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Run Text="Source:" />
                    <Hyperlink NavigateUri="{Binding FilePath, Mode=OneWay}" RequestNavigate="OnRequestNavigate">
                        <TextBlock Text="{Binding FilePath, Mode=OneWay}" />
                    </Hyperlink>
                </TextBlock>
            </StatusBarItem>
            <Separator />
            <StatusBarItem Visibility="{Binding IsListeningFile, Converter={StaticResource BooleanToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
                <TextBlock>
                    <Run Text="{Binding ChangeCount}" />
                    <Run Text="Change(s)" />
                </TextBlock>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</UserControl>
